{"version":3,"sources":["EditalbeField.js","AddAttributeElement.js","SheetAttributes.js","AddSkillElement.js","SheetSkills.js","Sheet.js","serviceWorker.js","index.js"],"names":["StyledInput","styled","input","EditableField","type","min","value","this","props","onChange","React","Component","AddAttributeElement","handleChange","bind","e","element","name","parseInt","target","level","pts","TwoRowDiv","div","StyledTable","table","SheetAttributes","mainAttributeList","secondAttributeList","attributes","forEach","length","push","key","AddSkillElement","cost","SheetSkills","newSkill","skillColunmOne","skillColumnTwo","skills","onClick","Sheet","state","attributeCosts","ST","DX","IQ","HT","HP","Will","Per","FP","skillType","skillCost","E","A","H","VH","handleAtrributeChange","handleNewSkill","handleSkillChange","tempArray","Object","entries","setState","max","Math","floor","random","map","tempLevel","tempPts","tempSkills","updateSkills","getRandomInt","calcSkillLevel","attributeArray","skillAttributeLevel","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7bf134f.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledInput = styled.input`\r\n    width: 2.5rem;\r\n    text-align: right;\r\n`\r\n\r\nclass EditableField extends React.Component {\r\n    render() {\r\n        return (\r\n            <StyledInput type = \"number\" min = \"0\" value = {this.props.value} onChange = {this.props.onChange}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditableField;","import React from 'react';\r\nimport EditableField from './EditalbeField';\r\n\r\n\r\nclass AddAttributeElement extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.onChange(this.props.element.name, parseInt(e.target.value, 10));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.element.name}</td>\r\n                <td>\r\n                    <EditableField\r\n                        value = {this.props.element.level}\r\n                        onChange = {this.handleChange}/>\r\n                </td>\r\n                <td>{this.props.element.pts}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddAttributeElement;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport AddAttributeElement from './AddAttributeElement';\r\n\r\nconst TwoRowDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nconst StyledTable = styled.table`\r\n    border-right: 2px solid #000;\r\n    margin: 0 10px 10px 0;\r\n`\r\nclass SheetAttributes extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(name,value) {\r\n        this.props.onChange(name,value);\r\n    }\r\n\r\n    render() {\r\n        let mainAttributeList = [],\r\n            secondAttributeList = [];\r\n        this.props.attributes.forEach(element => {\r\n            if (mainAttributeList.length <= 3) { //Will probably rework two lists into one which switch column after the fourth.\r\n                mainAttributeList.push(\r\n                    <AddAttributeElement\r\n                        element = {element}\r\n                        key = {element.name}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                );\r\n            } else if (secondAttributeList.length <= 3) {\r\n                secondAttributeList.push(\r\n                    <AddAttributeElement\r\n                        element = {element}\r\n                        key = {element.name}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                );\r\n            }\r\n        });\r\n\r\n        return (\r\n            <TwoRowDiv>\r\n                <StyledTable>\r\n                    <tbody>{mainAttributeList}</tbody>\r\n                </StyledTable>\r\n                <StyledTable>\r\n                    <tbody>{secondAttributeList}</tbody>\r\n                </StyledTable>\r\n            </TwoRowDiv>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default SheetAttributes;","import React from 'react';\r\nimport EditableField from './EditalbeField';\r\n\r\nclass AddSkillElement extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.onChange(this.props.element.name, parseInt(e.target.value, 10));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.element.name}</td>\r\n                <td>{`${this.props.element.type}/${this.props.element.cost[0]}`}</td>\r\n                <td>{this.props.element.level}</td>\r\n                <td>\r\n                    <EditableField\r\n                        value = {this.props.element.pts}\r\n                        onChange = {this.handleChange}/>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddSkillElement;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport AddSkillElement from './AddSkillElement';\r\n\r\nconst TwoRowDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nconst StyledTable = styled.table`\r\n    border-right: 2px solid #000;\r\n    margin: 0 10px 10px 0;\r\n`\r\n\r\nclass SheetSkills extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.newSkill = this.newSkill.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    newSkill(name,type) {\r\n        this.props.newSkill(name,type);\r\n    }\r\n\r\n    handleChange(name,value) {\r\n        this.props.onChange(name,value);\r\n    }\r\n        \r\n    render() {\r\n        let skillColunmOne = [],\r\n            skillColumnTwo = [];\r\n            if (this.props.skills) { //If skills contain any enteries we add them the tables. Even left, odd right.\r\n                this.props.skills.forEach(element => {\r\n                    if ((skillColunmOne.length + skillColumnTwo.length) % 2 === 0) {\r\n                        skillColunmOne.push(\r\n                            <AddSkillElement\r\n                                element = {element}\r\n                                key = {element.name}\r\n                                onChange = {this.handleChange}\r\n                            />\r\n                        );\r\n                    } else {\r\n                        skillColumnTwo.push(\r\n                            <AddSkillElement\r\n                                element = {element}\r\n                                key = {element.name}\r\n                                onChange = {this.handleChange}\r\n                            />\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        return (\r\n            <div>\r\n                <TwoRowDiv>\r\n                    <StyledTable>\r\n                        <tbody>{skillColunmOne}</tbody>\r\n                    </StyledTable>\r\n                    <StyledTable>\r\n                        <tbody>{skillColumnTwo}</tbody>\r\n                    </StyledTable>\r\n                </TwoRowDiv>\r\n                <button onClick = {this.newSkill}>\r\n                    NewSkill\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SheetSkills;","import React from 'react';\r\nimport SheetAttributes from './SheetAttributes';\r\nimport SheetSkills from './SheetSkills.js';\r\n\r\nclass Sheet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            attributes: [],\r\n            skills: []\r\n        }; \r\n        this.attributeCosts = {ST: 10, DX: 20, IQ: 20, HT: 10, HP: 2, Will: 5, Per: 5, FP: 3};\r\n        this.skillType = ['DX','IQ','HT','Per'];\r\n        this.skillCost = {E: 0, A: -1, H: -2, VH: -3};\r\n        this.handleAtrributeChange = this.handleAtrributeChange.bind(this);\r\n        this.handleNewSkill = this.handleNewSkill.bind(this);\r\n        this.handleSkillChange = this.handleSkillChange.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if (this.state.attributes.length === 0) {\r\n            let tempArray = [];\r\n            for (let [key,value] of Object.entries(this.attributeCosts)) {\r\n                tempArray.push({\r\n                    name: key,\r\n                    level: 10,\r\n                    pts: 0,\r\n                    cost: value});\r\n            }\r\n            this.setState({attributes: tempArray});\r\n        }\r\n    }\r\n\r\n    getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    handleAtrributeChange(name, level) {\r\n        // debugger;\r\n        let tempArray = this.state.attributes.map(element => {\r\n            if (element.name === name) {\r\n                let tempLevel = level ? level : 0;\r\n                let tempPts = element.cost * (level - 10);\r\n\r\n                return {name: name, level: tempLevel, pts: tempPts, cost: element.cost};\r\n            } else {\r\n                return element;\r\n            }\r\n        });\r\n        let tempSkills = this.updateSkills(tempArray);\r\n        this.setState({attributes: tempArray, skills: tempSkills});\r\n    }\r\n\r\n    handleNewSkill(name, type) {\r\n        let tempArray = [...this.state.skills],\r\n            skillType = this.skillType[this.getRandomInt(0,3)],\r\n            skillCost = Object.entries(this.skillCost)[this.getRandomInt(0,3)];\r\n        tempArray.push({\r\n            name: `Skill ${tempArray.length}`,\r\n            type: skillType,\r\n            cost: skillCost,\r\n            level: this.calcSkillLevel(skillType, skillCost[1], 1),\r\n            pts: 1\r\n        });\r\n        this.setState({skills: tempArray});\r\n    }\r\n\r\n    handleSkillChange(name,pts) {\r\n        // debugger;\r\n        let tempArray = this.state.skills.map(element => {\r\n            if (element.name === name) {\r\n                return {\r\n                    name: name,\r\n                    type: element.type,\r\n                    cost: element.cost,\r\n                    level: this.calcSkillLevel(element.type, element.cost[1], pts),\r\n                    pts: pts\r\n                };\r\n            } else {\r\n                return element;\r\n            }\r\n        });\r\n        this.setState({skills: tempArray});\r\n    }\r\n\r\n    updateSkills(attributeArray = null) {\r\n        let tempArray = this.state.skills.map(element => {\r\n            return {\r\n                name: element.name,\r\n                type: element.type,\r\n                cost: element.cost,\r\n                level: this.calcSkillLevel(element.type, element.cost[1],element.pts,attributeArray),\r\n                pts: element.pts\r\n            }\r\n        });\r\n        return tempArray;\r\n    }\r\n\r\n    calcSkillLevel(type, cost, pts, attributeArray = null) {\r\n        // debugger;\r\n        let attributes = [];\r\n        if (attributeArray){\r\n            attributes = attributeArray;\r\n        } else {\r\n            attributes = this.state.attributes;\r\n        }\r\n        let skillAttributeLevel = attributes.find(element => {\r\n            return element.name === type;\r\n        }).level;\r\n        if (pts === 0) {\r\n            return skillAttributeLevel + cost - 4;\r\n        } else if (pts === 1) {\r\n            return skillAttributeLevel + cost;\r\n        } else if (pts === 2) {\r\n            return skillAttributeLevel + cost + 1;\r\n        } else {\r\n            return skillAttributeLevel + cost + Math.floor(pts/4) + 1;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SheetAttributes \r\n                    attributes = {this.state.attributes}\r\n                    onChange = {this.handleAtrributeChange}\r\n                />\r\n                <SheetSkills\r\n                    skills = {this.state.skills}\r\n                    newSkill = {this.handleNewSkill}\r\n                    onChange = {this.handleSkillChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sheet;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Sheet from './Sheet';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Sheet />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}