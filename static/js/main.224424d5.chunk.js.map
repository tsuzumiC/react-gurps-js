{"version":3,"sources":["EditalbeField.js","AddElements.js","SheetAttributes.js","Sheet.js","serviceWorker.js","index.js"],"names":["EditableField","type","value","this","props","onChange","React","Component","AddElements","element","name","level","pts","SheetAttributes","attributeList","attributes","forEach","push","key","onAttributeChange","Sheet","state","attributeCosts","ST","DX","IQ","HT","HP","FP","Will","Per","handleAtrributeChange","bind","length","tempArray","Object","entries","cost","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAUeA,E,iLANP,OACI,2BAAOC,KAAO,OAAOC,MAASC,KAAKC,MAAMF,MAAOG,SAAYF,KAAKC,MAAMC,e,GAHvDC,IAAMC,WCcnBC,E,iLAVP,OACI,4BACI,4BAAKL,KAAKC,MAAMK,QAAQC,MACxB,4BAAI,kBAAC,EAAD,CAAeR,MAASC,KAAKC,MAAMK,QAAQE,MAAON,SAAYF,KAAKC,MAAMC,WAA7E,KACA,4BAAKF,KAAKC,MAAMK,QAAQG,U,GANdN,IAAMC,WC0BjBM,E,iLA1BD,IAAD,OACDC,EAAgB,GAUpB,OATAX,KAAKC,MAAMW,WAAWC,SAAQ,SAAAP,GAC1BK,EAAcG,KACV,kBAAC,EAAD,CACIR,QAAWA,EACXS,IAAOT,EAAQC,KACfL,SAAY,EAAKD,MAAMe,wBAK/B,+BACI,+BACI,4BACI,oCACA,qCACA,qCAGR,+BAAQL,Q,GArBMR,IAAMC,WCoCrBa,E,YAnCX,WAAYhB,GAAQ,IAAD,8BACf,4CAAMA,KACDiB,MAAQ,CACTN,WAAY,IAEhB,EAAKO,eAAiB,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,KAAM,EAAGC,IAAK,GACnF,EAAKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBANd,E,iFAUf,GAAqC,IAAjC7B,KAAKkB,MAAMN,WAAWkB,OAAc,CAEpC,IADA,IAAIC,EAAY,GAChB,MAAwBC,OAAOC,QAAQjC,KAAKmB,gBAA5C,eAA6D,CAAC,IAAD,sBAAnDJ,EAAmD,KAA/ChB,EAA+C,KACzDgC,EAAUjB,KAAK,CAACP,KAAMQ,EAAKP,MAAO,GAAIC,IAAK,EAAGyB,KAAMnC,IAExDC,KAAKmC,SAAS,CAACvB,WAAYmB,O,gFAS/B,OACI,6BACI,kBAAC,EAAD,CACInB,WAAcZ,KAAKkB,MAAMN,WACzBI,kBAAqBhB,KAAK4B,6B,GA7B1BzB,IAAMC,WCSNgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.224424d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass EditableField extends React.Component {\r\n    render() {\r\n        return (\r\n            <input type = \"text\" value = {this.props.value} onChange = {this.props.onChange}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditableField;","import React from 'react';\r\nimport EditableField from './EditalbeField';\r\n\r\n\r\nclass AddElements extends React.Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.element.name}</td>\r\n                <td><EditableField value = {this.props.element.level} onChange = {this.props.onChange}/> </td>\r\n                <td>{this.props.element.pts}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddElements;","import React from 'react';\r\nimport AddElements from './AddElements';\r\n\r\nclass SheetAttributes extends React.Component {\r\n    render() {\r\n        let attributeList = [];\r\n        this.props.attributes.forEach(element => {\r\n            attributeList.push(\r\n                <AddElements\r\n                    element = {element}\r\n                    key = {element.name}\r\n                    onChange = {this.props.onAttributeChange}\r\n                />\r\n            );\r\n        });\r\n        return (\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Level</th>\r\n                        <th>Pts</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{attributeList}</tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SheetAttributes;","import React from 'react';\r\nimport SheetAttributes from './SheetAttributes';\r\n\r\nclass Sheet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            attributes: []\r\n        }; \r\n        this.attributeCosts = {ST: 10, DX: 20, IQ: 20, HT: 10, HP: 2, FP: 3, Will: 5, Per: 5};\r\n        this.handleAtrributeChange = this.handleAtrributeChange.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if (this.state.attributes.length === 0) {\r\n            let tempArray = [];\r\n            for (let [key,value] of Object.entries(this.attributeCosts)) {\r\n                tempArray.push({name: key, level: 10, pts: 0, cost: value})\r\n            }\r\n            this.setState({attributes: tempArray});\r\n        }\r\n    }\r\n\r\n    handleAtrributeChange(){\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SheetAttributes \r\n                    attributes = {this.state.attributes}\r\n                    onAttributeChange = {this.handleAtrributeChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sheet;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Sheet from './Sheet';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Sheet />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}