{"version":3,"sources":["EditalbeNumberField.js","AddAttributeElement.js","SheetAttributes.js","AddSkillElement.js","EditalbeTextField.js","Select.js","SkillDefault.js","SkillDifficulty.js","NewSkillPopUp.js","SheetSkills.js","Sheet.js","serviceWorker.js","index.js"],"names":["StyledInput","styled","input","EditableNumberField","type","min","value","this","props","onChange","Component","StyledTR","tr","AddAttributeElement","handleChange","bind","e","element","name","parseInt","target","level","style","textAlign","marginRight","pts","ThreeColumn","div","StyledTable","table","SheetAttributes","column1","column2","column3","attributes","forEach","length","push","key","AddSkillElement","handleClicked","tagName","console","log","onClick","cost","Select","optionList","options","label","SkillDefault","SkillDifficulty","NewSkillBox","NewSkillPopUp","state","calcSkillLevel","handleNameChange","submitSkill","skillDefault","skillDifficulty","handlePtsChange","setState","skills","find","alert","onSubmit","preventDefault","temp","split","splice","skillAttributeLevel","Math","floor","gridColumn","StyledDiv","StyledTBody","tbody","SheetSkills","makeNewSkill","addNewSkill","bAddNewSkill","forceUpdate","skill","onNewSkill","skillColunm","disabled","SheetPage","Sheet","attributeCosts","ST","DX","IQ","HT","HP","Will","Per","FP","skillType","skillCost","E","A","H","VH","handleAtrributeChange","handleNewSkill","handleSkillChange","tempArray","Object","entries","max","random","map","tempLevel","tempPts","tempSkills","updateSkills","attributeArray","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d053096.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledInput = styled.input`\r\n    width: 2.5rem;\r\n    text-align: right;\r\n`\r\n\r\nexport default class EditableNumberField extends Component {\r\n    render() {\r\n        return (\r\n            <StyledInput\r\n                type = \"number\"\r\n                min = \"0\"\r\n                value = {this.props.value}\r\n                onChange = {this.props.onChange}/>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport EditableNumberField from './EditalbeNumberField';\r\n\r\nconst StyledTR = styled.tr`\r\n    display: grid;\r\n    grid-template: 1fr / 1fr 1fr 1fr;\r\n    margin-top: 2px;\r\n`\r\n\r\nexport default class AddAttributeElement extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.onChange(this.props.element.name, parseInt(e.target.value, 10));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StyledTR>\r\n                <td>{this.props.element.name}</td>\r\n                <td>\r\n                    <EditableNumberField\r\n                        value = {this.props.element.level}\r\n                        onChange = {this.handleChange}/>\r\n                </td>\r\n                <td style={{textAlign: \"right\", marginRight: \"5px\"}}>{this.props.element.pts}</td>\r\n            </StyledTR>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport styled from 'styled-components'\r\nimport AddAttributeElement from './AddAttributeElement';\r\n\r\nconst ThreeColumn = styled.div`\r\n    display: grid;\r\n    grid-template: 1fr / 1fr 1fr 1fr;\r\n    border: 1px solid #888844;\r\n    margin-right: 5px;\r\n`\r\nconst StyledTable = styled.table`\r\n\r\n`\r\nexport default class SheetAttributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(name,value) {\r\n        this.props.onChange(name,value);\r\n    }\r\n\r\n    render() {\r\n        let column1 = [],\r\n            column2 = [],\r\n            column3 = [];\r\n        this.props.attributes.forEach(element => {\r\n            if (column1.length <= 3) { //Will probably rework two lists into one which switch column after the fourth.\r\n                column1.push(\r\n                    <AddAttributeElement\r\n                        element = {element}\r\n                        key = {element.name}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                );\r\n            } else if (column2.length <= 3) {\r\n                column2.push(\r\n                    <AddAttributeElement\r\n                        element = {element}\r\n                        key = {element.name}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                );\r\n            } else if (column3.length <= 3) {\r\n                column3.push(\r\n                    <AddAttributeElement\r\n                        element = {element}\r\n                        key = {element.name}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                );\r\n            }\r\n        });\r\n\r\n        return (\r\n            <ThreeColumn>\r\n                <StyledTable>\r\n                    <tbody>{column1}</tbody>\r\n                </StyledTable>\r\n                <StyledTable>\r\n                    <tbody>{column2}</tbody>\r\n                </StyledTable>\r\n                <StyledTable>\r\n                    <tbody>{column3}</tbody>\r\n                </StyledTable>\r\n            </ThreeColumn>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport EditableNumberField from './EditalbeNumberField';\r\n\r\nconst StyledTR = styled.tr`\r\n    display: grid;\r\n    grid-template-rows: 1fr;\r\n    grid-template-columns: 1fr 4rem 3rem 3rem;\r\n`\r\n\r\nexport default class AddSkillElement extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClicked = this.handleClicked.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.onChange(this.props.element.name, parseInt(e.target.value, 10));\r\n    }\r\n\r\n    handleClicked(e) {\r\n        if (e.target.tagName === 'TD') {\r\n            console.log(e.target);\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StyledTR onClick = {this.handleClicked}>\r\n                <td>{this.props.element.name}</td>\r\n                <td style = {{textAlign: \"center\"}}>{`${this.props.element.type}/${this.props.element.cost[0]}`}</td>\r\n                <td style = {{textAlign: \"center\"}}>{this.props.element.level}</td>\r\n                <td>\r\n                    <EditableNumberField\r\n                        value = {this.props.element.pts}\r\n                        onChange = {this.handleChange}/>\r\n                </td>\r\n            </StyledTR>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledInput = styled.input`\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n`\r\n\r\nexport default class EditableNumberField extends Component {\r\n    render() {\r\n        return (\r\n            <StyledInput\r\n                type = \"text\"\r\n                value = {this.props.value}\r\n                onChange = {this.props.onChange}/>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class Select extends Component {\r\n    render() {\r\n        let optionList = [];\r\n        this.props.options.forEach(element => {\r\n            optionList.push(\r\n                <option value = {element.value} key = {element.label}>\r\n                    {element.label}\r\n                </option>)\r\n        });\r\n        return(\r\n            <select onChange = {this.props.onChange}>\r\n                {optionList}\r\n            </select>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Select from './Select';\r\n\r\nconst options = [\r\n    { value: 'DX', label: 'DX' },\r\n    { value: 'IQ', label: 'IQ' },\r\n    { value: 'HT', label: 'HT' },\r\n    { value: 'Per', label: 'Per' }\r\n];\r\n\r\nexport default class SkillDefault extends Component {\r\n    render() {\r\n        return(\r\n            <Select\r\n                onChange = {this.props.onChange}\r\n                options = {options}/>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport Select from './Select';\r\n\r\nconst options = [\r\n    {value: ['E', 0], label: 'E'},\r\n    {value: ['A', -1], label: 'A'},\r\n    {value: ['H', -2], label: 'H'},\r\n    {value: ['VH', -3], label: 'VH'}\r\n];\r\n\r\nexport default class SkillDifficulty extends Component {\r\n    render() {\r\n        return(\r\n            <Select\r\n                onChange = {this.props.onChange}\r\n                options = {options}/>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport EditableNumberField from './EditalbeNumberField';\r\nimport EditableTextField from './EditalbeTextField';\r\nimport SkillDefault from './SkillDefault';\r\nimport SkillDifficulty from './SkillDifficulty';\r\n\r\nconst NewSkillBox = styled.tr`\r\n    display: grid;\r\n    grid-template: 1fr 1fr / 1fr 3rem 3rem 4rem 3rem 3rem;\r\n    background-color: #fff4aa;\r\n    border: 1px solid #2244ff\r\n`\r\n\r\nexport default class NewSkillPopUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            type: 'DX',\r\n            cost: ['E', 0],\r\n            level: this.calcSkillLevel('DX', 0, 1),\r\n            pts: 1\r\n        };\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.submitSkill = this.submitSkill.bind(this);\r\n        this.skillDefault = this.skillDefault.bind(this);\r\n        this.skillDifficulty = this.skillDifficulty.bind(this);\r\n        this.handlePtsChange = this.handlePtsChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.setState({name: e.target.value});\r\n    }\r\n\r\n    submitSkill(e) {\r\n        this.props.skills.find(element => {\r\n            return (element.name === this.state.name);\r\n        }) ? alert(\"Skill already exists\") : this.props.onSubmit(this.state);\r\n        e.preventDefault();\r\n    }\r\n\r\n    skillDefault(e) {\r\n        this.setState({type: e.target.value});\r\n    }\r\n\r\n    skillDifficulty(e) {\r\n        let temp = e.target.value.split(',');\r\n        temp.splice(1,1,parseInt(temp[1], 10));\r\n        this.setState({cost: temp});\r\n    }\r\n\r\n    handlePtsChange(e) {\r\n        this.setState({\r\n            level: this.calcSkillLevel(this.state.type, this.state.cost[1], parseInt(e.target.value, 10)),\r\n            pts: e.target.value\r\n        });\r\n    }\r\n\r\n    calcSkillLevel(type, cost, pts) {\r\n        let attributes = this.props.attributes;\r\n        let skillAttributeLevel = attributes.find(element => {\r\n            return element.name === type;\r\n        }).level;\r\n        if (pts === 0) {\r\n            return skillAttributeLevel + cost - 4;\r\n        } else if (pts === 1) {\r\n            return skillAttributeLevel + cost;\r\n        } else if (pts === 2) {\r\n            return skillAttributeLevel + cost + 1;\r\n        } else {\r\n            return skillAttributeLevel + cost + Math.floor(pts/4) + 1;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <NewSkillBox>\r\n                <td>\r\n                    <EditableTextField\r\n                        value = {this.state.name}\r\n                        onChange = {this.handleNameChange}/>\r\n                </td>\r\n                <td>\r\n                    <SkillDefault\r\n                        onChange = {this.skillDefault}/>\r\n                </td>\r\n                <td>\r\n                    <SkillDifficulty\r\n                        onChange = {this.skillDifficulty}/>\r\n                </td>\r\n                <td style = {{textAlign: \"center\"}}>\r\n                {`${this.state.type}/${this.state.cost[0]}`}\r\n                </td>\r\n                <td style = {{textAlign: \"center\"}}>\r\n                    {this.state.level}\r\n                </td>\r\n                <td>\r\n                    <EditableNumberField\r\n                        value = {this.state.pts}\r\n                        onChange = {this.handlePtsChange}/>\r\n                </td>\r\n                <td style = {{gridColumn: 6}}>\r\n                    <button\r\n                        onClick = {this.submitSkill}>\r\n                            Add\r\n                    </button>\r\n                </td>\r\n            </NewSkillBox>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport styled from 'styled-components'\r\nimport AddSkillElement from './AddSkillElement';\r\nimport NewSkillPopUp from './NewSkillPopUp';\r\n\r\nconst StyledDiv = styled.div`\r\n    border: 1px solid #888844;\r\n    margin-left: 5px\r\n`\r\nconst StyledTBody = styled.tbody`\r\n    \r\n`\r\nconst StyledTR = styled.tr`\r\n    display: grid;\r\n    grid-template: 1fr / 1fr 4rem 3rem 3rem;\r\n    background-color: #fff4aa;\r\n    border: 1px solid #2244ff\r\n`\r\nconst StyledTable = styled.table`\r\n    width: 100%\r\n`\r\n\r\nexport default class SheetSkills extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeNewSkill = this.makeNewSkill.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addNewSkill = this.addNewSkill.bind(this);\r\n        this.bAddNewSkill = false;\r\n    }\r\n\r\n    makeNewSkill() {\r\n        this.bAddNewSkill = true;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    addNewSkill(skill) {\r\n        this.props.onNewSkill(skill);\r\n        this.bAddNewSkill = false;\r\n    }\r\n\r\n    handleChange(name,value) {\r\n        this.props.onChange(name,value);\r\n    }\r\n        \r\n    render() {\r\n        let skillColunm = [];\r\n        if (this.props.skills) {\r\n            this.props.skills.forEach(element => {\r\n                skillColunm.push(\r\n                    <AddSkillElement\r\n                        element = {element}\r\n                        key = {element.name}\r\n                        onChange = {this.handleChange}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n        if (this.bAddNewSkill) {\r\n            skillColunm.push(\r\n                <NewSkillPopUp\r\n                    skills = {this.props.skills}\r\n                    attributes = {this.props.attributes}\r\n                    onSubmit = {this.addNewSkill}\r\n                    />\r\n            );\r\n        }\r\n        return (\r\n            <StyledDiv>\r\n                <StyledTable>\r\n                    <thead>\r\n                        <StyledTR>\r\n                            <th>Name</th>\r\n                            <th>Type</th>\r\n                            <th>Level</th>\r\n                            <th>Pts</th>\r\n                        </StyledTR>\r\n                    </thead>\r\n                    <StyledTBody>{skillColunm}</StyledTBody>\r\n                </StyledTable>\r\n                <button\r\n                    onClick = {this.makeNewSkill}\r\n                    disabled = {this.bAddNewSkill}>\r\n                        NewSkill\r\n                </button>\r\n            </StyledDiv>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport SheetAttributes from './SheetAttributes';\r\nimport SheetSkills from './SheetSkills';\r\nimport styled from 'styled-components';\r\n\r\nconst SheetPage = styled.div`\r\n    display: grid;\r\n    grid-template: 100% / 50% 50%;\r\n    max-width: 1000px;\r\n    padding: 10px;\r\n    margin: 5px;\r\n    box-shadow: 1px 1px 5px 5px #00000022;\r\n    border: 1px solid #bbbbbb;\r\n    background-color: #ffffee;\r\n`\r\n\r\nexport default class Sheet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            attributes: [],\r\n            skills: []\r\n        };\r\n        this.attributeCosts = {ST: 10, DX: 20, IQ: 20, HT: 10, HP: 2, Will: 5, Per: 5, FP: 3};\r\n        this.skillType = ['DX','IQ','HT','Per'];\r\n        this.skillCost = {E: 0, A: -1, H: -2, VH: -3};\r\n        this.handleAtrributeChange = this.handleAtrributeChange.bind(this);\r\n        this.handleNewSkill = this.handleNewSkill.bind(this);\r\n        this.handleSkillChange = this.handleSkillChange.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if (this.state.attributes.length === 0) {\r\n            let tempArray = [];\r\n            for (let [key,value] of Object.entries(this.attributeCosts)) {\r\n                tempArray.push({\r\n                    name: key,\r\n                    level: 10,\r\n                    pts: 0,\r\n                    cost: value});\r\n            }\r\n            this.setState({attributes: tempArray});\r\n        }\r\n    }\r\n\r\n    getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    handleAtrributeChange(name, level) {\r\n        let tempArray = this.state.attributes.map(element => {\r\n            if (element.name === name) {\r\n                let tempLevel = level ? level : 0;\r\n                let tempPts = element.cost * (level - 10);\r\n\r\n                return {name: name, level: tempLevel, pts: tempPts, cost: element.cost};\r\n            } else {\r\n                return element;\r\n            }\r\n        });\r\n        let tempSkills = this.updateSkills(tempArray);\r\n        this.setState({attributes: tempArray, skills: tempSkills});\r\n    }\r\n\r\n    handleNewSkill(skill) {\r\n        let tempArray = this.state.skills;\r\n        tempArray.push({...skill});\r\n        this.setState({\r\n            skills: tempArray\r\n        });\r\n    }\r\n\r\n    handleSkillChange(name,pts) {\r\n        let tempArray = this.state.skills.map(element => {\r\n            if (element.name === name) {\r\n                return {\r\n                    name: name,\r\n                    type: element.type,\r\n                    cost: element.cost,\r\n                    level: this.calcSkillLevel(element.type, element.cost[1], pts),\r\n                    pts: pts\r\n                };\r\n            } else {\r\n                return element;\r\n            }\r\n        });\r\n        this.setState({skills: tempArray});\r\n    }\r\n\r\n    updateSkills(attributeArray = null) {\r\n        let tempArray = this.state.skills.map(element => {\r\n            return {\r\n                name: element.name,\r\n                type: element.type,\r\n                cost: element.cost,\r\n                level: this.calcSkillLevel(element.type, element.cost[1],element.pts,attributeArray),\r\n                pts: element.pts\r\n            }\r\n        });\r\n        return tempArray;\r\n    }\r\n\r\n    calcSkillLevel(type, cost, pts, attributeArray = null) {\r\n        let attributes = [];\r\n        if (attributeArray){\r\n            attributes = attributeArray;\r\n        } else {\r\n            attributes = this.state.attributes;\r\n        }\r\n        let skillAttributeLevel = attributes.find(element => {\r\n            return element.name === type;\r\n        }).level;\r\n        if (pts === 0) {\r\n            return skillAttributeLevel + cost - 4;\r\n        } else if (pts === 1) {\r\n            return skillAttributeLevel + cost;\r\n        } else if (pts === 2) {\r\n            return skillAttributeLevel + cost + 1;\r\n        } else {\r\n            return skillAttributeLevel + cost + Math.floor(pts/4) + 1;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SheetPage>\r\n                <SheetAttributes \r\n                    attributes = {this.state.attributes}\r\n                    onChange = {this.handleAtrributeChange}\r\n                />\r\n                <SheetSkills\r\n                    skills = {this.state.skills}\r\n                    attributes = {this.state.attributes}\r\n                    onNewSkill = {this.handleNewSkill}\r\n                    onChange = {this.handleSkillChange}\r\n                />\r\n            </SheetPage>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Sheet from './Sheet';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Sheet />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}